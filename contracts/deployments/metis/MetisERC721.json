{
  "address": "0x8399778f2303deCF850Cf7036538d9F56f0663d7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "_setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allbidstoken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "TokenID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "bid",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "bidderHash",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "status",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bidCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "claimToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_bid",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_updatedURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "createBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf248161a9fff5f019ba724eef23367f2d5b51b14499930036d75240242e49bf4",
  "receipt": {
    "to": null,
    "from": "0x168e007d9f5a794794E40035C5214963cb16BFB7",
    "contractAddress": "0x8399778f2303deCF850Cf7036538d9F56f0663d7",
    "transactionIndex": 0,
    "gasUsed": "19580691",
    "logsBloom": "0x
    "blockHash": "0x794bda7ace013e8e5fc0823e2c7a545c8e81c5c116ef647928940ca2d7bf3f4d",
    "transactionHash": "0xf248161a9fff5f019ba724eef23367f2d5b51b14499930036d75240242e49bf4",
    "logs": [],
    "blockNumber": 68053,
    "cumulativeGasUsed": "19580691",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Metis",
    "MET"
  ],
  "solcInputHash": "c9539f68d8e65bc6547b50415b00b2e5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"_setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allbidstoken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bidderHash\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_bid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_updatedURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MetisERC721.sol\":\"MetisERC721\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/MetisERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\ncontract MetisERC721 is ERC721 {\\n\\tuint256 private _tokenIds;\\n\\tmapping(uint256 => string) private _tokenURIs;\\n\\n\\tmapping(uint256 => Bid) public allbidstoken;\\n\\n\\tuint256 public bidCount = 0;\\n\\tstruct Bid {\\n\\t\\tuint256 TokenID;\\n\\t\\tstring bid;\\n\\t\\taddress bidderHash;\\n\\t\\tstring date;\\n\\t\\tstring status;\\n\\t}\\n\\tstruct Bidder {\\n\\t\\tuint256 id;\\n\\t\\tstring username;\\n\\t}\\n\\n\\tconstructor(string memory name, string memory symbol)\\n\\t\\tERC721(name, symbol)\\n\\t{}\\n\\n\\tfunction claimToken(address _claimer, string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t_mint(_claimer, _tokenIds);\\n\\t\\t_setTokenURI(_tokenIds, _tokenURI);\\n\\n\\t\\t_tokenIds++;\\n\\n\\t\\treturn _tokenIds;\\n\\t}\\n\\n\\tfunction _setTokenURI(uint256 tokenId, string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_exists(tokenId),\\n\\t\\t\\t\\\"ERC721Metadata: URI set of nonexistent token\\\"\\n\\t\\t);\\n\\t\\t_tokenURIs[tokenId] = _tokenURI;\\n\\t}\\n\\n\\tfunction tokenURI(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_exists(tokenId),\\n\\t\\t\\t\\\"ERC721Metadata: URI query for nonexistent token\\\"\\n\\t\\t);\\n\\n\\t\\treturn _tokenURIs[tokenId];\\n\\t}\\n\\n\\tfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn _tokenIds;\\n\\t}\\n\\n\\tfunction createBid(\\n\\t\\tuint256 _tokenId,\\n\\t\\tstring memory _bid,\\n\\t\\tstring memory _updatedURI,\\n\\t\\taddress bidder\\n\\t) public {\\n\\t\\tbidCount++;\\n\\t\\t_tokenURIs[_tokenId] = _updatedURI;\\n\\n\\t\\tallbidstoken[bidCount] = Bid(_tokenId, _bid, bidder, \\\"date\\\", \\\"Bid\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0x8d7f03bfdae83ca0c1c8b4a9c5ef8579fa2964c13e72db6630a14b5ddf12fa19\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006009553480156200001657600080fd5b50604051620030fc380380620030fc83398181016040528101906200003c9190620001a8565b81818160009080519060200190620000569291906200007a565b5080600190805190602001906200006f9291906200007a565b5050505050620003b1565b8280546200008890620002c2565b90600052602060002090601f016020900481019282620000ac5760008555620000f8565b82601f10620000c757805160ff1916838001178555620000f8565b82800160010185558215620000f8579182015b82811115620000f7578251825591602001919060010190620000da565b5b5090506200010791906200010b565b5090565b5b80821115620001265760008160009055506001016200010c565b5090565b6000620001416200013b8462000256565b6200022d565b90508281526020810184848401111562000160576200015f62000391565b5b6200016d8482856200028c565b509392505050565b600082601f8301126200018d576200018c6200038c565b5b81516200019f8482602086016200012a565b91505092915050565b60008060408385031215620001c257620001c16200039b565b5b600083015167ffffffffffffffff811115620001e357620001e262000396565b5b620001f18582860162000175565b925050602083015167ffffffffffffffff81111562000215576200021462000396565b5b620002238582860162000175565b9150509250929050565b6000620002396200024c565b9050620002478282620002f8565b919050565b6000604051905090565b600067ffffffffffffffff8211156200027457620002736200035d565b5b6200027f82620003a0565b9050602081019050919050565b60005b83811015620002ac5780820151818401526020810190506200028f565b83811115620002bc576000848401525b50505050565b60006002820490506001821680620002db57607f821691505b60208210811415620002f257620002f16200032e565b5b50919050565b6200030382620003a0565b810181811067ffffffffffffffff821117156200032557620003246200035d565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b612d3b80620003c16000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80636352211e116100ad578063a22cb46511610071578063a22cb46514610330578063b40a56271461034c578063b88d4fde1461036a578063c87b56dd14610386578063e985e9c5146103b657610121565b80636352211e1461026657806370a08231146102965780638b591073146102c6578063931b3385146102e257806395d89b411461031257610121565b8063081812fc116100f4578063081812fc146101c4578063095ea7b3146101f457806318160ddd1461021057806323b872dd1461022e57806342842e0e1461024a57610121565b80630153886814610126578063019524e71461014257806301ffc9a71461017657806306fdde03146101a6575b600080fd5b610140600480360381019061013b9190611e6f565b6103e6565b005b61015c60048036038101906101579190611e42565b61045a565b60405161016d9594939291906124b5565b60405180910390f35b610190600480360381019061018b9190611de8565b610648565b60405161019d919061227d565b60405180910390f35b6101ae61072a565b6040516101bb9190612298565b60405180910390f35b6101de60048036038101906101d99190611e42565b6107bc565b6040516101eb9190612216565b60405180910390f35b61020e60048036038101906102099190611da8565b610841565b005b610218610959565b604051610225919061249a565b60405180910390f35b61024860048036038101906102439190611c36565b610963565b005b610264600480360381019061025f9190611c36565b6109c3565b005b610280600480360381019061027b9190611e42565b6109e3565b60405161028d9190612216565b60405180910390f35b6102b060048036038101906102ab9190611bc9565b610a95565b6040516102bd919061249a565b60405180910390f35b6102e060048036038101906102db9190611ecb565b610b4d565b005b6102fc60048036038101906102f79190611d4c565b610cfa565b604051610309919061249a565b60405180910390f35b61031a610d37565b6040516103279190612298565b60405180910390f35b61034a60048036038101906103459190611d0c565b610dc9565b005b610354610f4a565b604051610361919061249a565b60405180910390f35b610384600480360381019061037f9190611c89565b610f50565b005b6103a0600480360381019061039b9190611e42565b610fb2565b6040516103ad9190612298565b60405180910390f35b6103d060048036038101906103cb9190611bf6565b61109f565b6040516103dd919061227d565b60405180910390f35b6103ef82611133565b61042e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610425906123fa565b60405180910390fd5b806007600084815260200190815260200160002090805190602001906104559291906119dd565b505050565b60086020528060005260406000206000915090508060000154908060010180546104839061271c565b80601f01602080910402602001604051908101604052809291908181526020018280546104af9061271c565b80156104fc5780601f106104d1576101008083540402835291602001916104fc565b820191906000526020600020905b8154815290600101906020018083116104df57829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030180546105379061271c565b80601f01602080910402602001604051908101604052809291908181526020018280546105639061271c565b80156105b05780601f10610585576101008083540402835291602001916105b0565b820191906000526020600020905b81548152906001019060200180831161059357829003601f168201915b5050505050908060040180546105c59061271c565b80601f01602080910402602001604051908101604052809291908181526020018280546105f19061271c565b801561063e5780601f106106135761010080835404028352916020019161063e565b820191906000526020600020905b81548152906001019060200180831161062157829003601f168201915b5050505050905085565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061071357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061072357506107228261119f565b5b9050919050565b6060600080546107399061271c565b80601f01602080910402602001604051908101604052809291908181526020018280546107659061271c565b80156107b25780601f10610787576101008083540402835291602001916107b2565b820191906000526020600020905b81548152906001019060200180831161079557829003601f168201915b5050505050905090565b60006107c782611133565b610806576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fd906123da565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061084c826109e3565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b49061245a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108dc611209565b73ffffffffffffffffffffffffffffffffffffffff16148061090b575061090a81610905611209565b61109f565b5b61094a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109419061235a565b60405180910390fd5b6109548383611211565b505050565b6000600654905090565b61097461096e611209565b826112ca565b6109b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109aa9061247a565b60405180910390fd5b6109be8383836113a8565b505050565b6109de83838360405180602001604052806000815250610f50565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a839061239a565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afd9061237a565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60096000815480929190610b609061277f565b919050555081600760008681526020019081526020016000209080519060200190610b8c9291906119dd565b506040518060a001604052808581526020018481526020018273ffffffffffffffffffffffffffffffffffffffff1681526020016040518060400160405280600481526020017f646174650000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f4269640000000000000000000000000000000000000000000000000000000000815250815250600860006009548152602001908152602001600020600082015181600001556020820151816001019080519060200190610c6f9291906119dd565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003019080519060200190610cd39291906119dd565b506080820151816004019080519060200190610cf09291906119dd565b5090505050505050565b6000610d0883600654611604565b610d14600654836103e6565b60066000815480929190610d279061277f565b9190505550600654905092915050565b606060018054610d469061271c565b80601f0160208091040260200160405190810160405280929190818152602001828054610d729061271c565b8015610dbf5780601f10610d9457610100808354040283529160200191610dbf565b820191906000526020600020905b815481529060010190602001808311610da257829003601f168201915b5050505050905090565b610dd1611209565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e369061231a565b60405180910390fd5b8060056000610e4c611209565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610ef9611209565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610f3e919061227d565b60405180910390a35050565b60095481565b610f61610f5b611209565b836112ca565b610fa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f979061247a565b60405180910390fd5b610fac848484846117d2565b50505050565b6060610fbd82611133565b610ffc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff39061243a565b60405180910390fd5b60076000838152602001908152602001600020805461101a9061271c565b80601f01602080910402602001604051908101604052809291908181526020018280546110469061271c565b80156110935780601f1061106857610100808354040283529160200191611093565b820191906000526020600020905b81548152906001019060200180831161107657829003601f168201915b50505050509050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611284836109e3565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006112d582611133565b611314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130b9061233a565b60405180910390fd5b600061131f836109e3565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061138e57508373ffffffffffffffffffffffffffffffffffffffff16611376846107bc565b73ffffffffffffffffffffffffffffffffffffffff16145b8061139f575061139e818561109f565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166113c8826109e3565b73ffffffffffffffffffffffffffffffffffffffff161461141e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114159061241a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561148e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611485906122fa565b60405180910390fd5b61149983838361182e565b6114a4600082611211565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114f49190612632565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461154b91906125dc565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611674576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166b906123ba565b60405180910390fd5b61167d81611133565b156116bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b4906122da565b60405180910390fd5b6116c96000838361182e565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461171991906125dc565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6117dd8484846113a8565b6117e984848484611833565b611828576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181f906122ba565b60405180910390fd5b50505050565b505050565b60006118548473ffffffffffffffffffffffffffffffffffffffff166119ca565b156119bd578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261187d611209565b8786866040518563ffffffff1660e01b815260040161189f9493929190612231565b602060405180830381600087803b1580156118b957600080fd5b505af19250505080156118ea57506040513d601f19601f820116820180604052508101906118e79190611e15565b60015b61196d573d806000811461191a576040519150601f19603f3d011682016040523d82523d6000602084013e61191f565b606091505b50600081511415611965576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195c906122ba565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506119c2565b600190505b949350505050565b600080823b905060008111915050919050565b8280546119e99061271c565b90600052602060002090601f016020900481019282611a0b5760008555611a52565b82601f10611a2457805160ff1916838001178555611a52565b82800160010185558215611a52579182015b82811115611a51578251825591602001919060010190611a36565b5b509050611a5f9190611a63565b5090565b5b80821115611a7c576000816000905550600101611a64565b5090565b6000611a93611a8e84612542565b61251d565b905082815260208101848484011115611aaf57611aae61285a565b5b611aba8482856126da565b509392505050565b6000611ad5611ad084612573565b61251d565b905082815260208101848484011115611af157611af061285a565b5b611afc8482856126da565b509392505050565b600081359050611b1381612ca9565b92915050565b600081359050611b2881612cc0565b92915050565b600081359050611b3d81612cd7565b92915050565b600081519050611b5281612cd7565b92915050565b600082601f830112611b6d57611b6c612855565b5b8135611b7d848260208601611a80565b91505092915050565b600082601f830112611b9b57611b9a612855565b5b8135611bab848260208601611ac2565b91505092915050565b600081359050611bc381612cee565b92915050565b600060208284031215611bdf57611bde612864565b5b6000611bed84828501611b04565b91505092915050565b60008060408385031215611c0d57611c0c612864565b5b6000611c1b85828601611b04565b9250506020611c2c85828601611b04565b9150509250929050565b600080600060608486031215611c4f57611c4e612864565b5b6000611c5d86828701611b04565b9350506020611c6e86828701611b04565b9250506040611c7f86828701611bb4565b9150509250925092565b60008060008060808587031215611ca357611ca2612864565b5b6000611cb187828801611b04565b9450506020611cc287828801611b04565b9350506040611cd387828801611bb4565b925050606085013567ffffffffffffffff811115611cf457611cf361285f565b5b611d0087828801611b58565b91505092959194509250565b60008060408385031215611d2357611d22612864565b5b6000611d3185828601611b04565b9250506020611d4285828601611b19565b9150509250929050565b60008060408385031215611d6357611d62612864565b5b6000611d7185828601611b04565b925050602083013567ffffffffffffffff811115611d9257611d9161285f565b5b611d9e85828601611b86565b9150509250929050565b60008060408385031215611dbf57611dbe612864565b5b6000611dcd85828601611b04565b9250506020611dde85828601611bb4565b9150509250929050565b600060208284031215611dfe57611dfd612864565b5b6000611e0c84828501611b2e565b91505092915050565b600060208284031215611e2b57611e2a612864565b5b6000611e3984828501611b43565b91505092915050565b600060208284031215611e5857611e57612864565b5b6000611e6684828501611bb4565b91505092915050565b60008060408385031215611e8657611e85612864565b5b6000611e9485828601611bb4565b925050602083013567ffffffffffffffff811115611eb557611eb461285f565b5b611ec185828601611b86565b9150509250929050565b60008060008060808587031215611ee557611ee4612864565b5b6000611ef387828801611bb4565b945050602085013567ffffffffffffffff811115611f1457611f1361285f565b5b611f2087828801611b86565b935050604085013567ffffffffffffffff811115611f4157611f4061285f565b5b611f4d87828801611b86565b9250506060611f5e87828801611b04565b91505092959194509250565b611f7381612666565b82525050565b611f8281612678565b82525050565b6000611f93826125a4565b611f9d81856125ba565b9350611fad8185602086016126e9565b611fb681612869565b840191505092915050565b6000611fcc826125af565b611fd681856125cb565b9350611fe68185602086016126e9565b611fef81612869565b840191505092915050565b60006120076032836125cb565b91506120128261287a565b604082019050919050565b600061202a601c836125cb565b9150612035826128c9565b602082019050919050565b600061204d6024836125cb565b9150612058826128f2565b604082019050919050565b60006120706019836125cb565b915061207b82612941565b602082019050919050565b6000612093602c836125cb565b915061209e8261296a565b604082019050919050565b60006120b66038836125cb565b91506120c1826129b9565b604082019050919050565b60006120d9602a836125cb565b91506120e482612a08565b604082019050919050565b60006120fc6029836125cb565b915061210782612a57565b604082019050919050565b600061211f6020836125cb565b915061212a82612aa6565b602082019050919050565b6000612142602c836125cb565b915061214d82612acf565b604082019050919050565b6000612165602c836125cb565b915061217082612b1e565b604082019050919050565b60006121886029836125cb565b915061219382612b6d565b604082019050919050565b60006121ab602f836125cb565b91506121b682612bbc565b604082019050919050565b60006121ce6021836125cb565b91506121d982612c0b565b604082019050919050565b60006121f16031836125cb565b91506121fc82612c5a565b604082019050919050565b612210816126d0565b82525050565b600060208201905061222b6000830184611f6a565b92915050565b60006080820190506122466000830187611f6a565b6122536020830186611f6a565b6122606040830185612207565b81810360608301526122728184611f88565b905095945050505050565b60006020820190506122926000830184611f79565b92915050565b600060208201905081810360008301526122b28184611fc1565b905092915050565b600060208201905081810360008301526122d381611ffa565b9050919050565b600060208201905081810360008301526122f38161201d565b9050919050565b6000602082019050818103600083015261231381612040565b9050919050565b6000602082019050818103600083015261233381612063565b9050919050565b6000602082019050818103600083015261235381612086565b9050919050565b60006020820190508181036000830152612373816120a9565b9050919050565b60006020820190508181036000830152612393816120cc565b9050919050565b600060208201905081810360008301526123b3816120ef565b9050919050565b600060208201905081810360008301526123d381612112565b9050919050565b600060208201905081810360008301526123f381612135565b9050919050565b6000602082019050818103600083015261241381612158565b9050919050565b600060208201905081810360008301526124338161217b565b9050919050565b600060208201905081810360008301526124538161219e565b9050919050565b60006020820190508181036000830152612473816121c1565b9050919050565b60006020820190508181036000830152612493816121e4565b9050919050565b60006020820190506124af6000830184612207565b92915050565b600060a0820190506124ca6000830188612207565b81810360208301526124dc8187611fc1565b90506124eb6040830186611f6a565b81810360608301526124fd8185611fc1565b905081810360808301526125118184611fc1565b90509695505050505050565b6000612527612538565b9050612533828261274e565b919050565b6000604051905090565b600067ffffffffffffffff82111561255d5761255c612826565b5b61256682612869565b9050602081019050919050565b600067ffffffffffffffff82111561258e5761258d612826565b5b61259782612869565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006125e7826126d0565b91506125f2836126d0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612627576126266127c8565b5b828201905092915050565b600061263d826126d0565b9150612648836126d0565b92508282101561265b5761265a6127c8565b5b828203905092915050565b6000612671826126b0565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156127075780820151818401526020810190506126ec565b83811115612716576000848401525b50505050565b6000600282049050600182168061273457607f821691505b60208210811415612748576127476127f7565b5b50919050565b61275782612869565b810181811067ffffffffffffffff8211171561277657612775612826565b5b80604052505050565b600061278a826126d0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127bd576127bc6127c8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b612cb281612666565b8114612cbd57600080fd5b50565b612cc981612678565b8114612cd457600080fd5b50565b612ce081612684565b8114612ceb57600080fd5b50565b612cf7816126d0565b8114612d0257600080fd5b5056fea26469706673582212202495d46479ebc100e4c8dca502ba32fe0a5e5e23293240975e79e186bd44708664736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80636352211e116100ad578063a22cb46511610071578063a22cb46514610330578063b40a56271461034c578063b88d4fde1461036a578063c87b56dd14610386578063e985e9c5146103b657610121565b80636352211e1461026657806370a08231146102965780638b591073146102c6578063931b3385146102e257806395d89b411461031257610121565b8063081812fc116100f4578063081812fc146101c4578063095ea7b3146101f457806318160ddd1461021057806323b872dd1461022e57806342842e0e1461024a57610121565b80630153886814610126578063019524e71461014257806301ffc9a71461017657806306fdde03146101a6575b600080fd5b610140600480360381019061013b9190611e6f565b6103e6565b005b61015c60048036038101906101579190611e42565b61045a565b60405161016d9594939291906124b5565b60405180910390f35b610190600480360381019061018b9190611de8565b610648565b60405161019d919061227d565b60405180910390f35b6101ae61072a565b6040516101bb9190612298565b60405180910390f35b6101de60048036038101906101d99190611e42565b6107bc565b6040516101eb9190612216565b60405180910390f35b61020e60048036038101906102099190611da8565b610841565b005b610218610959565b604051610225919061249a565b60405180910390f35b61024860048036038101906102439190611c36565b610963565b005b610264600480360381019061025f9190611c36565b6109c3565b005b610280600480360381019061027b9190611e42565b6109e3565b60405161028d9190612216565b60405180910390f35b6102b060048036038101906102ab9190611bc9565b610a95565b6040516102bd919061249a565b60405180910390f35b6102e060048036038101906102db9190611ecb565b610b4d565b005b6102fc60048036038101906102f79190611d4c565b610cfa565b604051610309919061249a565b60405180910390f35b61031a610d37565b6040516103279190612298565b60405180910390f35b61034a60048036038101906103459190611d0c565b610dc9565b005b610354610f4a565b604051610361919061249a565b60405180910390f35b610384600480360381019061037f9190611c89565b610f50565b005b6103a0600480360381019061039b9190611e42565b610fb2565b6040516103ad9190612298565b60405180910390f35b6103d060048036038101906103cb9190611bf6565b61109f565b6040516103dd919061227d565b60405180910390f35b6103ef82611133565b61042e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610425906123fa565b60405180910390fd5b806007600084815260200190815260200160002090805190602001906104559291906119dd565b505050565b60086020528060005260406000206000915090508060000154908060010180546104839061271c565b80601f01602080910402602001604051908101604052809291908181526020018280546104af9061271c565b80156104fc5780601f106104d1576101008083540402835291602001916104fc565b820191906000526020600020905b8154815290600101906020018083116104df57829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030180546105379061271c565b80601f01602080910402602001604051908101604052809291908181526020018280546105639061271c565b80156105b05780601f10610585576101008083540402835291602001916105b0565b820191906000526020600020905b81548152906001019060200180831161059357829003601f168201915b5050505050908060040180546105c59061271c565b80601f01602080910402602001604051908101604052809291908181526020018280546105f19061271c565b801561063e5780601f106106135761010080835404028352916020019161063e565b820191906000526020600020905b81548152906001019060200180831161062157829003601f168201915b5050505050905085565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061071357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061072357506107228261119f565b5b9050919050565b6060600080546107399061271c565b80601f01602080910402602001604051908101604052809291908181526020018280546107659061271c565b80156107b25780601f10610787576101008083540402835291602001916107b2565b820191906000526020600020905b81548152906001019060200180831161079557829003601f168201915b5050505050905090565b60006107c782611133565b610806576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fd906123da565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061084c826109e3565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b49061245a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108dc611209565b73ffffffffffffffffffffffffffffffffffffffff16148061090b575061090a81610905611209565b61109f565b5b61094a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109419061235a565b60405180910390fd5b6109548383611211565b505050565b6000600654905090565b61097461096e611209565b826112ca565b6109b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109aa9061247a565b60405180910390fd5b6109be8383836113a8565b505050565b6109de83838360405180602001604052806000815250610f50565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a839061239a565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afd9061237a565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60096000815480929190610b609061277f565b919050555081600760008681526020019081526020016000209080519060200190610b8c9291906119dd565b506040518060a001604052808581526020018481526020018273ffffffffffffffffffffffffffffffffffffffff1681526020016040518060400160405280600481526020017f646174650000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f4269640000000000000000000000000000000000000000000000000000000000815250815250600860006009548152602001908152602001600020600082015181600001556020820151816001019080519060200190610c6f9291906119dd565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003019080519060200190610cd39291906119dd565b506080820151816004019080519060200190610cf09291906119dd565b5090505050505050565b6000610d0883600654611604565b610d14600654836103e6565b60066000815480929190610d279061277f565b9190505550600654905092915050565b606060018054610d469061271c565b80601f0160208091040260200160405190810160405280929190818152602001828054610d729061271c565b8015610dbf5780601f10610d9457610100808354040283529160200191610dbf565b820191906000526020600020905b815481529060010190602001808311610da257829003601f168201915b5050505050905090565b610dd1611209565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e369061231a565b60405180910390fd5b8060056000610e4c611209565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610ef9611209565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610f3e919061227d565b60405180910390a35050565b60095481565b610f61610f5b611209565b836112ca565b610fa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f979061247a565b60405180910390fd5b610fac848484846117d2565b50505050565b6060610fbd82611133565b610ffc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff39061243a565b60405180910390fd5b60076000838152602001908152602001600020805461101a9061271c565b80601f01602080910402602001604051908101604052809291908181526020018280546110469061271c565b80156110935780601f1061106857610100808354040283529160200191611093565b820191906000526020600020905b81548152906001019060200180831161107657829003601f168201915b50505050509050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611284836109e3565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006112d582611133565b611314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130b9061233a565b60405180910390fd5b600061131f836109e3565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061138e57508373ffffffffffffffffffffffffffffffffffffffff16611376846107bc565b73ffffffffffffffffffffffffffffffffffffffff16145b8061139f575061139e818561109f565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166113c8826109e3565b73ffffffffffffffffffffffffffffffffffffffff161461141e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114159061241a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561148e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611485906122fa565b60405180910390fd5b61149983838361182e565b6114a4600082611211565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114f49190612632565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461154b91906125dc565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611674576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166b906123ba565b60405180910390fd5b61167d81611133565b156116bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b4906122da565b60405180910390fd5b6116c96000838361182e565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461171991906125dc565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6117dd8484846113a8565b6117e984848484611833565b611828576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181f906122ba565b60405180910390fd5b50505050565b505050565b60006118548473ffffffffffffffffffffffffffffffffffffffff166119ca565b156119bd578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261187d611209565b8786866040518563ffffffff1660e01b815260040161189f9493929190612231565b602060405180830381600087803b1580156118b957600080fd5b505af19250505080156118ea57506040513d601f19601f820116820180604052508101906118e79190611e15565b60015b61196d573d806000811461191a576040519150601f19603f3d011682016040523d82523d6000602084013e61191f565b606091505b50600081511415611965576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195c906122ba565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506119c2565b600190505b949350505050565b600080823b905060008111915050919050565b8280546119e99061271c565b90600052602060002090601f016020900481019282611a0b5760008555611a52565b82601f10611a2457805160ff1916838001178555611a52565b82800160010185558215611a52579182015b82811115611a51578251825591602001919060010190611a36565b5b509050611a5f9190611a63565b5090565b5b80821115611a7c576000816000905550600101611a64565b5090565b6000611a93611a8e84612542565b61251d565b905082815260208101848484011115611aaf57611aae61285a565b5b611aba8482856126da565b509392505050565b6000611ad5611ad084612573565b61251d565b905082815260208101848484011115611af157611af061285a565b5b611afc8482856126da565b509392505050565b600081359050611b1381612ca9565b92915050565b600081359050611b2881612cc0565b92915050565b600081359050611b3d81612cd7565b92915050565b600081519050611b5281612cd7565b92915050565b600082601f830112611b6d57611b6c612855565b5b8135611b7d848260208601611a80565b91505092915050565b600082601f830112611b9b57611b9a612855565b5b8135611bab848260208601611ac2565b91505092915050565b600081359050611bc381612cee565b92915050565b600060208284031215611bdf57611bde612864565b5b6000611bed84828501611b04565b91505092915050565b60008060408385031215611c0d57611c0c612864565b5b6000611c1b85828601611b04565b9250506020611c2c85828601611b04565b9150509250929050565b600080600060608486031215611c4f57611c4e612864565b5b6000611c5d86828701611b04565b9350506020611c6e86828701611b04565b9250506040611c7f86828701611bb4565b9150509250925092565b60008060008060808587031215611ca357611ca2612864565b5b6000611cb187828801611b04565b9450506020611cc287828801611b04565b9350506040611cd387828801611bb4565b925050606085013567ffffffffffffffff811115611cf457611cf361285f565b5b611d0087828801611b58565b91505092959194509250565b60008060408385031215611d2357611d22612864565b5b6000611d3185828601611b04565b9250506020611d4285828601611b19565b9150509250929050565b60008060408385031215611d6357611d62612864565b5b6000611d7185828601611b04565b925050602083013567ffffffffffffffff811115611d9257611d9161285f565b5b611d9e85828601611b86565b9150509250929050565b60008060408385031215611dbf57611dbe612864565b5b6000611dcd85828601611b04565b9250506020611dde85828601611bb4565b9150509250929050565b600060208284031215611dfe57611dfd612864565b5b6000611e0c84828501611b2e565b91505092915050565b600060208284031215611e2b57611e2a612864565b5b6000611e3984828501611b43565b91505092915050565b600060208284031215611e5857611e57612864565b5b6000611e6684828501611bb4565b91505092915050565b60008060408385031215611e8657611e85612864565b5b6000611e9485828601611bb4565b925050602083013567ffffffffffffffff811115611eb557611eb461285f565b5b611ec185828601611b86565b9150509250929050565b60008060008060808587031215611ee557611ee4612864565b5b6000611ef387828801611bb4565b945050602085013567ffffffffffffffff811115611f1457611f1361285f565b5b611f2087828801611b86565b935050604085013567ffffffffffffffff811115611f4157611f4061285f565b5b611f4d87828801611b86565b9250506060611f5e87828801611b04565b91505092959194509250565b611f7381612666565b82525050565b611f8281612678565b82525050565b6000611f93826125a4565b611f9d81856125ba565b9350611fad8185602086016126e9565b611fb681612869565b840191505092915050565b6000611fcc826125af565b611fd681856125cb565b9350611fe68185602086016126e9565b611fef81612869565b840191505092915050565b60006120076032836125cb565b91506120128261287a565b604082019050919050565b600061202a601c836125cb565b9150612035826128c9565b602082019050919050565b600061204d6024836125cb565b9150612058826128f2565b604082019050919050565b60006120706019836125cb565b915061207b82612941565b602082019050919050565b6000612093602c836125cb565b915061209e8261296a565b604082019050919050565b60006120b66038836125cb565b91506120c1826129b9565b604082019050919050565b60006120d9602a836125cb565b91506120e482612a08565b604082019050919050565b60006120fc6029836125cb565b915061210782612a57565b604082019050919050565b600061211f6020836125cb565b915061212a82612aa6565b602082019050919050565b6000612142602c836125cb565b915061214d82612acf565b604082019050919050565b6000612165602c836125cb565b915061217082612b1e565b604082019050919050565b60006121886029836125cb565b915061219382612b6d565b604082019050919050565b60006121ab602f836125cb565b91506121b682612bbc565b604082019050919050565b60006121ce6021836125cb565b91506121d982612c0b565b604082019050919050565b60006121f16031836125cb565b91506121fc82612c5a565b604082019050919050565b612210816126d0565b82525050565b600060208201905061222b6000830184611f6a565b92915050565b60006080820190506122466000830187611f6a565b6122536020830186611f6a565b6122606040830185612207565b81810360608301526122728184611f88565b905095945050505050565b60006020820190506122926000830184611f79565b92915050565b600060208201905081810360008301526122b28184611fc1565b905092915050565b600060208201905081810360008301526122d381611ffa565b9050919050565b600060208201905081810360008301526122f38161201d565b9050919050565b6000602082019050818103600083015261231381612040565b9050919050565b6000602082019050818103600083015261233381612063565b9050919050565b6000602082019050818103600083015261235381612086565b9050919050565b60006020820190508181036000830152612373816120a9565b9050919050565b60006020820190508181036000830152612393816120cc565b9050919050565b600060208201905081810360008301526123b3816120ef565b9050919050565b600060208201905081810360008301526123d381612112565b9050919050565b600060208201905081810360008301526123f381612135565b9050919050565b6000602082019050818103600083015261241381612158565b9050919050565b600060208201905081810360008301526124338161217b565b9050919050565b600060208201905081810360008301526124538161219e565b9050919050565b60006020820190508181036000830152612473816121c1565b9050919050565b60006020820190508181036000830152612493816121e4565b9050919050565b60006020820190506124af6000830184612207565b92915050565b600060a0820190506124ca6000830188612207565b81810360208301526124dc8187611fc1565b90506124eb6040830186611f6a565b81810360608301526124fd8185611fc1565b905081810360808301526125118184611fc1565b90509695505050505050565b6000612527612538565b9050612533828261274e565b919050565b6000604051905090565b600067ffffffffffffffff82111561255d5761255c612826565b5b61256682612869565b9050602081019050919050565b600067ffffffffffffffff82111561258e5761258d612826565b5b61259782612869565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006125e7826126d0565b91506125f2836126d0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612627576126266127c8565b5b828201905092915050565b600061263d826126d0565b9150612648836126d0565b92508282101561265b5761265a6127c8565b5b828203905092915050565b6000612671826126b0565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156127075780820151818401526020810190506126ec565b83811115612716576000848401525b50505050565b6000600282049050600182168061273457607f821691505b60208210811415612748576127476127f7565b5b50919050565b61275782612869565b810181811067ffffffffffffffff8211171561277657612775612826565b5b80604052505050565b600061278a826126d0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127bd576127bc6127c8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b612cb281612666565b8114612cbd57600080fd5b50565b612cc981612678565b8114612cd457600080fd5b50565b612ce081612684565b8114612ceb57600080fd5b50565b612cf7816126d0565b8114612d0257600080fd5b5056fea26469706673582212202495d46479ebc100e4c8dca502ba32fe0a5e5e23293240975e79e186bd44708664736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1541,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1545,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1550,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "allbidstoken",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Bid)1564_storage)"
      },
      {
        "astId": 1553,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "bidCount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Bid)1564_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MetisERC721.Bid)",
        "numberOfBytes": "32",
        "value": "t_struct(Bid)1564_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bid)1564_storage": {
        "encoding": "inplace",
        "label": "struct MetisERC721.Bid",
        "members": [
          {
            "astId": 1555,
            "contract": "contracts/MetisERC721.sol:MetisERC721",
            "label": "TokenID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1557,
            "contract": "contracts/MetisERC721.sol:MetisERC721",
            "label": "bid",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1559,
            "contract": "contracts/MetisERC721.sol:MetisERC721",
            "label": "bidderHash",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1561,
            "contract": "contracts/MetisERC721.sol:MetisERC721",
            "label": "date",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1563,
            "contract": "contracts/MetisERC721.sol:MetisERC721",
            "label": "status",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}