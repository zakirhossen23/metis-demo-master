{
  "address": "0xF9E73e7B52FC97462e86340246Db1513d4708979",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "BidId",
          "type": "uint256"
        }
      ],
      "name": "BidURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_EventTokenSearchIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_SearchedStore",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "_getSearchedTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        }
      ],
      "name": "_setBidURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "_setEventURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenBidId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "TokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_BidURI",
          "type": "string"
        }
      ],
      "name": "_setTokenBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "EventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "_setTokenEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "_setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_eventid",
          "type": "uint256"
        }
      ],
      "name": "claimToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_updatedURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_eventid",
          "type": "uint256"
        }
      ],
      "name": "createBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "createEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "eventURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        }
      ],
      "name": "getBidIdByUri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenID",
          "type": "uint256"
        }
      ],
      "name": "getBidsSearchToken",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "getGetEventsTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenID",
          "type": "uint256"
        }
      ],
      "name": "getTotalBid",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "gettokenIdByUri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventID",
          "type": "uint256"
        }
      ],
      "name": "gettokenSearchEventTotal",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaae2a71463b884fde24c6c5f0609035cae8fe3b8a75c421cd3c53df49d3670f7",
  "receipt": {
    "to": null,
    "from": "0x168e007d9f5a794794E40035C5214963cb16BFB7",
    "contractAddress": "0xF9E73e7B52FC97462e86340246Db1513d4708979",
    "transactionIndex": 0,
    "gasUsed": "26746266",
    "logsBloom": "0x
    "blockHash": "0x3a923fe4acc68a776ad48be6e0aaaff4e7288fff7902a6f5c777df322836f93c",
    "transactionHash": "0xaae2a71463b884fde24c6c5f0609035cae8fe3b8a75c421cd3c53df49d3670f7",
    "logs": [],
    "blockNumber": 114213,
    "cumulativeGasUsed": "26746266",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Metis",
    "MET"
  ],
  "solcInputHash": "0d1e5a382ac30ed4bc4e481de200269e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"BidId\",\"type\":\"uint256\"}],\"name\":\"BidURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_EventTokenSearchIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_SearchedStore\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"_getSearchedTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"}],\"name\":\"_setBidURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"_setEventURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenBidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_BidURI\",\"type\":\"string\"}],\"name\":\"_setTokenBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"_setTokenEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"_setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_eventid\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_updatedURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_eventid\",\"type\":\"uint256\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"createEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"eventURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"}],\"name\":\"getBidIdByUri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"getBidsSearchToken\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"getGetEventsTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"getTotalBid\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"gettokenIdByUri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventID\",\"type\":\"uint256\"}],\"name\":\"gettokenSearchEventTotal\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MetisERC721.sol\":\"MetisERC721\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MetisERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract MetisERC721 is ERC721 {\\n\\tuint256 private _tokenIds;\\n\\tuint256 private _bidIds;\\n\\tuint256 private _eventIds;\\n\\tuint256 private _EventTokenIds;\\n\\tuint256 private _TokenBidIds;\\n\\tstring[2] data1;\\n\\tuint256 public _EventTokenSearchIds;\\n\\tmapping(uint256 => string[2]) private AllEventTokens;\\n\\tmapping(uint256 => string[2]) private AllTokensBids;\\n\\tmapping(uint256 => string[2]) public _SearchedStore;\\n\\tmapping(uint256 => string) private _bidURIs;\\n\\tmapping(uint256 => string) private _tokenURIs;\\n\\tmapping(uint256 => string) private _eventURIs;\\n\\tmapping(string => string) private _eventTokens;\\n\\n\\tconstructor(string memory name, string memory symbol)\\n\\t\\tERC721(name, symbol)\\n\\t{}\\n\\n\\tfunction claimToken(\\n\\t\\taddress _claimer,\\n\\t\\tstring memory _tokenURI,\\n\\t\\tuint256 _eventid\\n\\t) public returns (uint256) {\\n\\t\\t_mint(_claimer, _tokenIds);\\n\\t\\t_setTokenURI(_tokenIds, _tokenURI);\\n\\t\\t_setTokenEvent(_EventTokenIds, _eventid, _tokenURI);\\n\\t\\t_tokenIds++;\\n\\t\\t_EventTokenIds++;\\n\\t\\treturn _tokenIds;\\n\\t}\\n\\n\\tfunction _setTokenEvent(\\n\\t\\tuint256 EventTokenId,\\n\\t\\tuint256 EventId,\\n\\t\\tstring memory _tokenURI\\n\\t) public virtual {\\n\\t\\tAllEventTokens[EventTokenId] = [\\n\\t\\t\\tStrings.toString(EventId),\\n\\t\\t\\tstring(_tokenURI)\\n\\t\\t];\\n\\t}\\n\\n\\tfunction createEvent(address _claimer, string memory _eventURI)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t_setEventURI(_eventIds, _eventURI);\\n\\n\\t\\t_eventIds++;\\n\\n\\t\\treturn _eventIds;\\n\\t}\\n\\n\\tfunction gettokenIdByUri(string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _tokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(_tokenURIs[i])) == keccak256(bytes(_tokenURI))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\n\\tfunction getBidIdByUri(string memory _bidURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _bidIds; i++) {\\n\\t\\t\\tif (keccak256(bytes(_bidURIs[i])) == keccak256(bytes(_bidURI))) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\n\\tfunction gettokenSearchEventTotal(uint256 EventID)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\tstring[] memory _SearchedStoreToken = new string[](10);\\n\\n\\t\\tuint256 _EventTokenSearchIds2 = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _EventTokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(EventID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreToken[_EventTokenSearchIds2] = AllEventTokens[i][\\n\\t\\t\\t\\t\\t1\\n\\t\\t\\t\\t];\\n\\t\\t\\t\\t_EventTokenSearchIds2++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedStoreToken;\\n\\t}\\n\\n\\tfunction getGetEventsTokenID(uint256 EventId, string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _EventTokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(EventId))) &&\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][1])) ==\\n\\t\\t\\t\\tkeccak256(bytes(_tokenURI))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\n\\tfunction _getSearchedTokenURI(uint256 _tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\treturn _SearchedStore[_tokenId][0];\\n\\t}\\n\\n\\tfunction _setEventURI(uint256 eventId, string memory _eventURI)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t{\\n\\t\\t_eventURIs[eventId] = _eventURI;\\n\\t}\\n\\n\\tfunction _setTokenURI(uint256 tokenId, string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_exists(tokenId),\\n\\t\\t\\t\\\"ERC721Metadata: URI set of nonexistent token\\\"\\n\\t\\t);\\n\\t\\t_tokenURIs[tokenId] = _tokenURI;\\n\\t}\\n\\n\\tfunction eventURI(uint256 eventId) public view returns (string memory) {\\n\\t\\treturn _eventURIs[eventId];\\n\\t}\\n\\n\\tfunction tokenURI(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_exists(tokenId),\\n\\t\\t\\t\\\"ERC721Metadata: URI query for nonexistent token\\\"\\n\\t\\t);\\n\\n\\t\\treturn _tokenURIs[tokenId];\\n\\t}\\n\\n\\tfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn _tokenIds;\\n\\t}\\n\\n\\tfunction totalEvent() public view returns (uint256) {\\n\\t\\treturn _eventIds;\\n\\t}\\n\\n\\tfunction _setBidURI(uint256 bidId, string memory _bidURI) public virtual {\\n\\t\\t_bidURIs[bidId] = _bidURI;\\n\\t}\\n\\n\\tfunction BidURI(uint256 BidId) public view returns (string memory) {\\n\\t\\treturn _bidURIs[BidId];\\n\\t}\\n\\n\\tfunction getTotalBid(uint256 TokenID)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\tstring[] memory _SearchedStoreBid = new string[](10);\\n\\n\\t\\tuint256 _TokenBidSearchIds2 = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _TokenBidIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllTokensBids[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(TokenID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreBid[_TokenBidSearchIds2] = AllTokensBids[i][1];\\n\\t\\t\\t\\t_TokenBidSearchIds2++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedStoreBid;\\n\\t}\\n\\n\\tfunction getBidsSearchToken(uint256 TokenID)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\tstring[] memory _SearchedStoreBid = new string[](10);\\n\\n\\t\\tuint256 _TokenBidSearchIds2 = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _TokenBidIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllTokensBids[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(TokenID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreBid[_TokenBidSearchIds2] = AllTokensBids[i][1];\\n\\t\\t\\t\\t_TokenBidSearchIds2++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedStoreBid;\\n\\t}\\n\\n\\tfunction _setTokenBid(\\n\\t\\tuint256 TokenBidId,\\n\\t\\tuint256 TokenId,\\n\\t\\tstring memory _BidURI\\n\\t) public virtual {\\n\\t\\tAllTokensBids[TokenBidId] = [\\n\\t\\t\\tStrings.toString(TokenId),\\n\\t\\t\\tstring(_BidURI)\\n\\t\\t];\\n\\t}\\n\\n\\tfunction createBid(\\n\\t\\tuint256 _tokenId,\\n\\t\\tstring memory _bidURI,\\n\\t\\tstring memory _updatedURI,\\n\\t\\tuint256 _eventid\\n\\t) public {\\n\\t\\tuint256 _EventTokenId = getGetEventsTokenID(\\n\\t\\t\\t_eventid,\\n\\t\\t\\t_tokenURIs[_tokenId]\\n\\t\\t);\\n\\t\\t_tokenURIs[_tokenId] = _updatedURI;\\n\\t\\t_setTokenEvent(_EventTokenId, _eventid, _updatedURI);\\n\\n\\t\\t_setTokenBid(_TokenBidIds, _tokenId, _bidURI);\\n\\t\\t_TokenBidIds++;\\n\\t\\t_bidIds++;\\n\\t}\\n}\\n\",\"keccak256\":\"0x435789f269d21c3ca6bc3a2938a9c363de023bc30729e12ec267cc38590973b6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004243380380620042438339818101604052810190620000379190620001a3565b818181600090805190602001906200005192919062000075565b5080600190805190602001906200006a92919062000075565b5050505050620003ac565b8280546200008390620002bd565b90600052602060002090601f016020900481019282620000a75760008555620000f3565b82601f10620000c257805160ff1916838001178555620000f3565b82800160010185558215620000f3579182015b82811115620000f2578251825591602001919060010190620000d5565b5b50905062000102919062000106565b5090565b5b808211156200012157600081600090555060010162000107565b5090565b60006200013c620001368462000251565b62000228565b9050828152602081018484840111156200015b576200015a6200038c565b5b6200016884828562000287565b509392505050565b600082601f83011262000188576200018762000387565b5b81516200019a84826020860162000125565b91505092915050565b60008060408385031215620001bd57620001bc62000396565b5b600083015167ffffffffffffffff811115620001de57620001dd62000391565b5b620001ec8582860162000170565b925050602083015167ffffffffffffffff81111562000210576200020f62000391565b5b6200021e8582860162000170565b9150509250929050565b60006200023462000247565b9050620002428282620002f3565b919050565b6000604051905090565b600067ffffffffffffffff8211156200026f576200026e62000358565b5b6200027a826200039b565b9050602081019050919050565b60005b83811015620002a75780820151818401526020810190506200028a565b83811115620002b7576000848401525b50505050565b60006002820490506001821680620002d657607f821691505b60208210811415620002ed57620002ec62000329565b5b50919050565b620002fe826200039b565b810181811067ffffffffffffffff8211171562000320576200031f62000358565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b613e8780620003bc6000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c8063652d47251161011a578063aed47961116100ad578063d45fc5161161007c578063d45fc5161461066d578063d654e9931461069d578063e08033d3146106b9578063e985e9c5146106d5578063eb1d234d1461070557610206565b8063aed47961146105c1578063b10a5dfa146105f1578063b88d4fde14610621578063c87b56dd1461063d57610206565b8063932a196b116100e9578063932a196b1461052757806395d89b4114610557578063a0fd0c6a14610575578063a22cb465146105a557610206565b8063652d47251461047957806370a08231146104a95780637cedbc1e146104d95780637eadfa6a1461050957610206565b80631cd043d61161019d5780633592dd801161016c5780633592dd80146103b157806342842e0e146103cd578063446a92e3146103e95780635154380a146104195780636352211e1461044957610206565b80631cd043d61461031957806323b872dd1461033557806328520ab71461035157806335011d901461038157610206565b8063095ea7b3116101d9578063095ea7b3146102a55780630da3c49c146102c1578063144cbca6146102dd57806318160ddd146102fb57610206565b8063015388681461020b57806301ffc9a71461022757806306fdde0314610257578063081812fc14610275575b600080fd5b61022560048036038101906102209190612cd0565b610735565b005b610241600480360381019061023c9190612c00565b6107a9565b60405161024e9190613307565b60405180910390f35b61025f61088b565b60405161026c9190613322565b60405180910390f35b61028f600480360381019061028a9190612ca3565b61091d565b60405161029c919061327e565b60405180910390f35b6102bf60048036038101906102ba9190612bc0565b6109a2565b005b6102db60048036038101906102d69190612d2c565b610aba565b005b6102e5610bda565b6040516102f29190613524565b60405180910390f35b610303610be0565b6040516103109190613524565b60405180910390f35b610333600480360381019061032e9190612cd0565b610bea565b005b61034f600480360381019061034a91906129df565b610c16565b005b61036b60048036038101906103669190612cd0565b610c76565b6040516103789190613524565b60405180910390f35b61039b60048036038101906103969190612b51565b610d4f565b6040516103a89190613524565b60405180910390f35b6103cb60048036038101906103c69190612e0b565b610db2565b005b6103e760048036038101906103e291906129df565b610df6565b005b61040360048036038101906103fe9190612ca3565b610e16565b6040516104109190613322565b60405180910390f35b610433600480360381019061042e9190612ca3565b610ebb565b60405161044091906132e5565b60405180910390f35b610463600480360381019061045e9190612ca3565b61106b565b604051610470919061327e565b60405180910390f35b610493600480360381019061048e9190612af5565b61111d565b6040516104a09190613524565b60405180910390f35b6104c360048036038101906104be9190612972565b61114e565b6040516104d09190613524565b60405180910390f35b6104f360048036038101906104ee9190612ca3565b611206565b6040516105009190613322565b60405180910390f35b6105116112bf565b60405161051e9190613524565b60405180910390f35b610541600480360381019061053c9190612c5a565b6112c9565b60405161054e9190613524565b60405180910390f35b61055f611338565b60405161056c9190613322565b60405180910390f35b61058f600480360381019061058a9190612ca3565b6113ca565b60405161059c9190613322565b60405180910390f35b6105bf60048036038101906105ba9190612ab5565b61146f565b005b6105db60048036038101906105d69190612ca3565b611485565b6040516105e891906132e5565b60405180910390f35b61060b60048036038101906106069190612dcb565b611635565b6040516106189190613322565b60405180910390f35b61063b60048036038101906106369190612a32565b6116e5565b005b61065760048036038101906106529190612ca3565b611747565b6040516106649190613322565b60405180910390f35b61068760048036038101906106829190612c5a565b611834565b6040516106949190613524565b60405180910390f35b6106b760048036038101906106b29190612e0b565b6118a3565b005b6106d360048036038101906106ce9190612cd0565b6118e7565b005b6106ef60048036038101906106ea919061299f565b611913565b6040516106fc9190613307565b60405180910390f35b61071f600480360381019061071a9190612ca3565b6119a7565b60405161072c91906132e5565b60405180910390f35b61073e82611b57565b61077d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077490613484565b60405180910390fd5b806012600084815260200190815260200160002090805190602001906107a49291906126cf565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061087457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610884575061088382611bc3565b5b9050919050565b60606000805461089a906137d9565b80601f01602080910402602001604051908101604052809291908181526020018280546108c6906137d9565b80156109135780601f106108e857610100808354040283529160200191610913565b820191906000526020600020905b8154815290600101906020018083116108f657829003601f168201915b5050505050905090565b600061092882611b57565b610967576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095e90613464565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006109ad8261106b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a15906134e4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610a3d611c2d565b73ffffffffffffffffffffffffffffffffffffffff161480610a6c5750610a6b81610a66611c2d565b611913565b5b610aab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa2906133e4565b60405180910390fd5b610ab58383611c35565b505050565b6000610b6182601260008881526020019081526020016000208054610ade906137d9565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0a906137d9565b8015610b575780601f10610b2c57610100808354040283529160200191610b57565b820191906000526020600020905b815481529060010190602001808311610b3a57829003601f168201915b5050505050610c76565b905082601260008781526020019081526020016000209080519060200190610b8a9291906126cf565b50610b96818385610db2565b610ba3600a5486866118a3565b600a6000815480929190610bb69061383c565b919050555060076000815480929190610bce9061383c565b91905055505050505050565b600d5481565b6000600654905090565b80601360008481526020019081526020016000209080519060200190610c119291906126cf565b505050565b610c27610c21611c2d565b82611cee565b610c66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5d90613504565b60405180910390fd5b610c71838383611dcc565b505050565b600080600090505b600954811015610d4357610c9184612028565b80519060200120600e6000838152602001908152602001600020600060028110610cbe57610cbd613943565b5b01604051610ccc9190613267565b6040518091039020148015610d2257508280519060200120600e6000838152602001908152602001600020600160028110610d0a57610d09613943565b5b01604051610d189190613267565b6040518091039020145b15610d305780915050610d49565b8080610d3b9061383c565b915050610c7e565b50600090505b92915050565b6000610d5d84600654612189565b610d6960065484610735565b610d766009548385610db2565b60066000815480929190610d899061383c565b919050555060096000815480929190610da19061383c565b919050555060065490509392505050565b6040518060400160405280610dc684612028565b815260200182815250600e6000858152602001908152602001600020906002610df0929190612755565b50505050565b610e11838383604051806020016040528060008152506116e5565b505050565b6060601160008381526020019081526020016000208054610e36906137d9565b80601f0160208091040260200160405190810160405280929190818152602001828054610e62906137d9565b8015610eaf5780601f10610e8457610100808354040283529160200191610eaf565b820191906000526020600020905b815481529060010190602001808311610e9257829003601f168201915b50505050509050919050565b60606000600a67ffffffffffffffff811115610eda57610ed9613972565b5b604051908082528060200260200182016040528015610f0d57816020015b6060815260200190600190039081610ef85790505b5090506000805b600a5481101561106057610f2785612028565b80519060200120600f6000838152602001908152602001600020600060028110610f5457610f53613943565b5b01604051610f629190613267565b6040518091039020141561104d57600f6000828152602001908152602001600020600160028110610f9657610f95613943565b5b018054610fa2906137d9565b80601f0160208091040260200160405190810160405280929190818152602001828054610fce906137d9565b801561101b5780601f10610ff05761010080835404028352916020019161101b565b820191906000526020600020905b815481529060010190602001808311610ffe57829003601f168201915b505050505083838151811061103357611032613943565b5b602002602001018190525081806110499061383c565b9250505b80806110589061383c565b915050610f14565b508192505050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611114576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110b90613424565b60405180910390fd5b80915050919050565b600061112b60085483610bea565b6008600081548092919061113e9061383c565b9190505550600854905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b690613404565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606010600083815260200190815260200160002060006002811061122e5761122d613943565b5b01805461123a906137d9565b80601f0160208091040260200160405190810160405280929190818152602001828054611266906137d9565b80156112b35780601f10611288576101008083540402835291602001916112b3565b820191906000526020600020905b81548152906001019060200180831161129657829003601f168201915b50505050509050919050565b6000600854905090565b600080600090505b60065481101561132d578280519060200120601260008381526020019081526020016000206040516113039190613267565b6040518091039020141561131a5780915050611333565b80806113259061383c565b9150506112d1565b50600090505b919050565b606060018054611347906137d9565b80601f0160208091040260200160405190810160405280929190818152602001828054611373906137d9565b80156113c05780601f10611395576101008083540402835291602001916113c0565b820191906000526020600020905b8154815290600101906020018083116113a357829003601f168201915b5050505050905090565b60606013600083815260200190815260200160002080546113ea906137d9565b80601f0160208091040260200160405190810160405280929190818152602001828054611416906137d9565b80156114635780601f1061143857610100808354040283529160200191611463565b820191906000526020600020905b81548152906001019060200180831161144657829003601f168201915b50505050509050919050565b61148161147a611c2d565b8383612357565b5050565b60606000600a67ffffffffffffffff8111156114a4576114a3613972565b5b6040519080825280602002602001820160405280156114d757816020015b60608152602001906001900390816114c25790505b5090506000805b600a5481101561162a576114f185612028565b80519060200120600f600083815260200190815260200160002060006002811061151e5761151d613943565b5b0160405161152c9190613267565b6040518091039020141561161757600f60008281526020019081526020016000206001600281106115605761155f613943565b5b01805461156c906137d9565b80601f0160208091040260200160405190810160405280929190818152602001828054611598906137d9565b80156115e55780601f106115ba576101008083540402835291602001916115e5565b820191906000526020600020905b8154815290600101906020018083116115c857829003601f168201915b50505050508383815181106115fd576115fc613943565b5b602002602001018190525081806116139061383c565b9250505b80806116229061383c565b9150506114de565b508192505050919050565b6010602052816000526040600020816002811061165157600080fd5b01600091509150508054611664906137d9565b80601f0160208091040260200160405190810160405280929190818152602001828054611690906137d9565b80156116dd5780601f106116b2576101008083540402835291602001916116dd565b820191906000526020600020905b8154815290600101906020018083116116c057829003601f168201915b505050505081565b6116f66116f0611c2d565b83611cee565b611735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172c90613504565b60405180910390fd5b611741848484846124c4565b50505050565b606061175282611b57565b611791576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611788906134c4565b60405180910390fd5b6012600083815260200190815260200160002080546117af906137d9565b80601f01602080910402602001604051908101604052809291908181526020018280546117db906137d9565b80156118285780601f106117fd57610100808354040283529160200191611828565b820191906000526020600020905b81548152906001019060200180831161180b57829003601f168201915b50505050509050919050565b600080600090505b6007548110156118985782805190602001206011600083815260200190815260200160002060405161186e9190613267565b60405180910390201415611885578091505061189e565b80806118909061383c565b91505061183c565b50600090505b919050565b60405180604001604052806118b784612028565b815260200182815250600f60008581526020019081526020016000209060026118e1929190612755565b50505050565b8060116000848152602001908152602001600020908051906020019061190e9291906126cf565b505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60606000600a67ffffffffffffffff8111156119c6576119c5613972565b5b6040519080825280602002602001820160405280156119f957816020015b60608152602001906001900390816119e45790505b5090506000805b600954811015611b4c57611a1385612028565b80519060200120600e6000838152602001908152602001600020600060028110611a4057611a3f613943565b5b01604051611a4e9190613267565b60405180910390201415611b3957600e6000828152602001908152602001600020600160028110611a8257611a81613943565b5b018054611a8e906137d9565b80601f0160208091040260200160405190810160405280929190818152602001828054611aba906137d9565b8015611b075780601f10611adc57610100808354040283529160200191611b07565b820191906000526020600020905b815481529060010190602001808311611aea57829003601f168201915b5050505050838381518110611b1f57611b1e613943565b5b60200260200101819052508180611b359061383c565b9250505b8080611b449061383c565b915050611a00565b508192505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611ca88361106b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611cf982611b57565b611d38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2f906133c4565b60405180910390fd5b6000611d438361106b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611db257508373ffffffffffffffffffffffffffffffffffffffff16611d9a8461091d565b73ffffffffffffffffffffffffffffffffffffffff16145b80611dc35750611dc28185611913565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611dec8261106b565b73ffffffffffffffffffffffffffffffffffffffff1614611e42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e39906134a4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611eb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea990613384565b60405180910390fd5b611ebd838383612520565b611ec8600082611c35565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f1891906136ef565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f6f9190613668565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60606000821415612070576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612184565b600082905060005b600082146120a257808061208b9061383c565b915050600a8261209b91906136be565b9150612078565b60008167ffffffffffffffff8111156120be576120bd613972565b5b6040519080825280601f01601f1916602001820160405280156120f05781602001600182028036833780820191505090505b5090505b6000851461217d5760018261210991906136ef565b9150600a856121189190613885565b60306121249190613668565b60f81b81838151811061213a57612139613943565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561217691906136be565b94506120f4565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156121f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f090613444565b60405180910390fd5b61220281611b57565b15612242576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223990613364565b60405180910390fd5b61224e60008383612520565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461229e9190613668565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156123c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123bd906133a4565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516124b79190613307565b60405180910390a3505050565b6124cf848484611dcc565b6124db84848484612525565b61251a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251190613344565b60405180910390fd5b50505050565b505050565b60006125468473ffffffffffffffffffffffffffffffffffffffff166126bc565b156126af578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261256f611c2d565b8786866040518563ffffffff1660e01b81526004016125919493929190613299565b602060405180830381600087803b1580156125ab57600080fd5b505af19250505080156125dc57506040513d601f19601f820116820180604052508101906125d99190612c2d565b60015b61265f573d806000811461260c576040519150601f19603f3d011682016040523d82523d6000602084013e612611565b606091505b50600081511415612657576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264e90613344565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506126b4565b600190505b949350505050565b600080823b905060008111915050919050565b8280546126db906137d9565b90600052602060002090601f0160209004810192826126fd5760008555612744565b82601f1061271657805160ff1916838001178555612744565b82800160010185558215612744579182015b82811115612743578251825591602001919060010190612728565b5b50905061275191906127a8565b5090565b8260028101928215612797579160200282015b828111156127965782518290805190602001906127869291906126cf565b5091602001919060010190612768565b5b5090506127a491906127c5565b5090565b5b808211156127c15760008160009055506001016127a9565b5090565b5b808211156127e557600081816127dc91906127e9565b506001016127c6565b5090565b5080546127f5906137d9565b6000825580601f106128075750612826565b601f01602090049060005260206000209081019061282591906127a8565b5b50565b600061283c61283784613564565b61353f565b905082815260208101848484011115612858576128576139a6565b5b612863848285613797565b509392505050565b600061287e61287984613595565b61353f565b90508281526020810184848401111561289a576128996139a6565b5b6128a5848285613797565b509392505050565b6000813590506128bc81613df5565b92915050565b6000813590506128d181613e0c565b92915050565b6000813590506128e681613e23565b92915050565b6000815190506128fb81613e23565b92915050565b600082601f830112612916576129156139a1565b5b8135612926848260208601612829565b91505092915050565b600082601f830112612944576129436139a1565b5b813561295484826020860161286b565b91505092915050565b60008135905061296c81613e3a565b92915050565b600060208284031215612988576129876139b0565b5b6000612996848285016128ad565b91505092915050565b600080604083850312156129b6576129b56139b0565b5b60006129c4858286016128ad565b92505060206129d5858286016128ad565b9150509250929050565b6000806000606084860312156129f8576129f76139b0565b5b6000612a06868287016128ad565b9350506020612a17868287016128ad565b9250506040612a288682870161295d565b9150509250925092565b60008060008060808587031215612a4c57612a4b6139b0565b5b6000612a5a878288016128ad565b9450506020612a6b878288016128ad565b9350506040612a7c8782880161295d565b925050606085013567ffffffffffffffff811115612a9d57612a9c6139ab565b5b612aa987828801612901565b91505092959194509250565b60008060408385031215612acc57612acb6139b0565b5b6000612ada858286016128ad565b9250506020612aeb858286016128c2565b9150509250929050565b60008060408385031215612b0c57612b0b6139b0565b5b6000612b1a858286016128ad565b925050602083013567ffffffffffffffff811115612b3b57612b3a6139ab565b5b612b478582860161292f565b9150509250929050565b600080600060608486031215612b6a57612b696139b0565b5b6000612b78868287016128ad565b935050602084013567ffffffffffffffff811115612b9957612b986139ab565b5b612ba58682870161292f565b9250506040612bb68682870161295d565b9150509250925092565b60008060408385031215612bd757612bd66139b0565b5b6000612be5858286016128ad565b9250506020612bf68582860161295d565b9150509250929050565b600060208284031215612c1657612c156139b0565b5b6000612c24848285016128d7565b91505092915050565b600060208284031215612c4357612c426139b0565b5b6000612c51848285016128ec565b91505092915050565b600060208284031215612c7057612c6f6139b0565b5b600082013567ffffffffffffffff811115612c8e57612c8d6139ab565b5b612c9a8482850161292f565b91505092915050565b600060208284031215612cb957612cb86139b0565b5b6000612cc78482850161295d565b91505092915050565b60008060408385031215612ce757612ce66139b0565b5b6000612cf58582860161295d565b925050602083013567ffffffffffffffff811115612d1657612d156139ab565b5b612d228582860161292f565b9150509250929050565b60008060008060808587031215612d4657612d456139b0565b5b6000612d548782880161295d565b945050602085013567ffffffffffffffff811115612d7557612d746139ab565b5b612d818782880161292f565b935050604085013567ffffffffffffffff811115612da257612da16139ab565b5b612dae8782880161292f565b9250506060612dbf8782880161295d565b91505092959194509250565b60008060408385031215612de257612de16139b0565b5b6000612df08582860161295d565b9250506020612e018582860161295d565b9150509250929050565b600080600060608486031215612e2457612e236139b0565b5b6000612e328682870161295d565b9350506020612e438682870161295d565b925050604084013567ffffffffffffffff811115612e6457612e636139ab565b5b612e708682870161292f565b9150509250925092565b6000612e868383612fd9565b905092915050565b612e9781613723565b82525050565b6000612ea8826135eb565b612eb28185613619565b935083602082028501612ec4856135c6565b8060005b85811015612f005784840389528151612ee18582612e7a565b9450612eec8361360c565b925060208a01995050600181019050612ec8565b50829750879550505050505092915050565b612f1b81613735565b82525050565b6000612f2c826135f6565b612f36818561362a565b9350612f468185602086016137a6565b612f4f816139b5565b840191505092915050565b60008154612f67816137d9565b612f71818661363b565b94506001821660008114612f8c5760018114612f9d57612fd0565b60ff19831686528186019350612fd0565b612fa6856135d6565b60005b83811015612fc857815481890152600182019150602081019050612fa9565b838801955050505b50505092915050565b6000612fe482613601565b612fee8185613646565b9350612ffe8185602086016137a6565b613007816139b5565b840191505092915050565b600061301d82613601565b6130278185613657565b93506130378185602086016137a6565b613040816139b5565b840191505092915050565b6000613058603283613657565b9150613063826139c6565b604082019050919050565b600061307b601c83613657565b915061308682613a15565b602082019050919050565b600061309e602483613657565b91506130a982613a3e565b604082019050919050565b60006130c1601983613657565b91506130cc82613a8d565b602082019050919050565b60006130e4602c83613657565b91506130ef82613ab6565b604082019050919050565b6000613107603883613657565b915061311282613b05565b604082019050919050565b600061312a602a83613657565b915061313582613b54565b604082019050919050565b600061314d602983613657565b915061315882613ba3565b604082019050919050565b6000613170602083613657565b915061317b82613bf2565b602082019050919050565b6000613193602c83613657565b915061319e82613c1b565b604082019050919050565b60006131b6602c83613657565b91506131c182613c6a565b604082019050919050565b60006131d9602983613657565b91506131e482613cb9565b604082019050919050565b60006131fc602f83613657565b915061320782613d08565b604082019050919050565b600061321f602183613657565b915061322a82613d57565b604082019050919050565b6000613242603183613657565b915061324d82613da6565b604082019050919050565b6132618161378d565b82525050565b60006132738284612f5a565b915081905092915050565b60006020820190506132936000830184612e8e565b92915050565b60006080820190506132ae6000830187612e8e565b6132bb6020830186612e8e565b6132c86040830185613258565b81810360608301526132da8184612f21565b905095945050505050565b600060208201905081810360008301526132ff8184612e9d565b905092915050565b600060208201905061331c6000830184612f12565b92915050565b6000602082019050818103600083015261333c8184613012565b905092915050565b6000602082019050818103600083015261335d8161304b565b9050919050565b6000602082019050818103600083015261337d8161306e565b9050919050565b6000602082019050818103600083015261339d81613091565b9050919050565b600060208201905081810360008301526133bd816130b4565b9050919050565b600060208201905081810360008301526133dd816130d7565b9050919050565b600060208201905081810360008301526133fd816130fa565b9050919050565b6000602082019050818103600083015261341d8161311d565b9050919050565b6000602082019050818103600083015261343d81613140565b9050919050565b6000602082019050818103600083015261345d81613163565b9050919050565b6000602082019050818103600083015261347d81613186565b9050919050565b6000602082019050818103600083015261349d816131a9565b9050919050565b600060208201905081810360008301526134bd816131cc565b9050919050565b600060208201905081810360008301526134dd816131ef565b9050919050565b600060208201905081810360008301526134fd81613212565b9050919050565b6000602082019050818103600083015261351d81613235565b9050919050565b60006020820190506135396000830184613258565b92915050565b600061354961355a565b9050613555828261380b565b919050565b6000604051905090565b600067ffffffffffffffff82111561357f5761357e613972565b5b613588826139b5565b9050602081019050919050565b600067ffffffffffffffff8211156135b0576135af613972565b5b6135b9826139b5565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006136738261378d565b915061367e8361378d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156136b3576136b26138b6565b5b828201905092915050565b60006136c98261378d565b91506136d48361378d565b9250826136e4576136e36138e5565b5b828204905092915050565b60006136fa8261378d565b91506137058361378d565b925082821015613718576137176138b6565b5b828203905092915050565b600061372e8261376d565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156137c45780820151818401526020810190506137a9565b838111156137d3576000848401525b50505050565b600060028204905060018216806137f157607f821691505b6020821081141561380557613804613914565b5b50919050565b613814826139b5565b810181811067ffffffffffffffff8211171561383357613832613972565b5b80604052505050565b60006138478261378d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561387a576138796138b6565b5b600182019050919050565b60006138908261378d565b915061389b8361378d565b9250826138ab576138aa6138e5565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b613dfe81613723565b8114613e0957600080fd5b50565b613e1581613735565b8114613e2057600080fd5b50565b613e2c81613741565b8114613e3757600080fd5b50565b613e438161378d565b8114613e4e57600080fd5b5056fea2646970667358221220659dc207554e7aa24aad6450a73a10579319ec61dc11821e0b7a96e1c55da8d564736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c8063652d47251161011a578063aed47961116100ad578063d45fc5161161007c578063d45fc5161461066d578063d654e9931461069d578063e08033d3146106b9578063e985e9c5146106d5578063eb1d234d1461070557610206565b8063aed47961146105c1578063b10a5dfa146105f1578063b88d4fde14610621578063c87b56dd1461063d57610206565b8063932a196b116100e9578063932a196b1461052757806395d89b4114610557578063a0fd0c6a14610575578063a22cb465146105a557610206565b8063652d47251461047957806370a08231146104a95780637cedbc1e146104d95780637eadfa6a1461050957610206565b80631cd043d61161019d5780633592dd801161016c5780633592dd80146103b157806342842e0e146103cd578063446a92e3146103e95780635154380a146104195780636352211e1461044957610206565b80631cd043d61461031957806323b872dd1461033557806328520ab71461035157806335011d901461038157610206565b8063095ea7b3116101d9578063095ea7b3146102a55780630da3c49c146102c1578063144cbca6146102dd57806318160ddd146102fb57610206565b8063015388681461020b57806301ffc9a71461022757806306fdde0314610257578063081812fc14610275575b600080fd5b61022560048036038101906102209190612cd0565b610735565b005b610241600480360381019061023c9190612c00565b6107a9565b60405161024e9190613307565b60405180910390f35b61025f61088b565b60405161026c9190613322565b60405180910390f35b61028f600480360381019061028a9190612ca3565b61091d565b60405161029c919061327e565b60405180910390f35b6102bf60048036038101906102ba9190612bc0565b6109a2565b005b6102db60048036038101906102d69190612d2c565b610aba565b005b6102e5610bda565b6040516102f29190613524565b60405180910390f35b610303610be0565b6040516103109190613524565b60405180910390f35b610333600480360381019061032e9190612cd0565b610bea565b005b61034f600480360381019061034a91906129df565b610c16565b005b61036b60048036038101906103669190612cd0565b610c76565b6040516103789190613524565b60405180910390f35b61039b60048036038101906103969190612b51565b610d4f565b6040516103a89190613524565b60405180910390f35b6103cb60048036038101906103c69190612e0b565b610db2565b005b6103e760048036038101906103e291906129df565b610df6565b005b61040360048036038101906103fe9190612ca3565b610e16565b6040516104109190613322565b60405180910390f35b610433600480360381019061042e9190612ca3565b610ebb565b60405161044091906132e5565b60405180910390f35b610463600480360381019061045e9190612ca3565b61106b565b604051610470919061327e565b60405180910390f35b610493600480360381019061048e9190612af5565b61111d565b6040516104a09190613524565b60405180910390f35b6104c360048036038101906104be9190612972565b61114e565b6040516104d09190613524565b60405180910390f35b6104f360048036038101906104ee9190612ca3565b611206565b6040516105009190613322565b60405180910390f35b6105116112bf565b60405161051e9190613524565b60405180910390f35b610541600480360381019061053c9190612c5a565b6112c9565b60405161054e9190613524565b60405180910390f35b61055f611338565b60405161056c9190613322565b60405180910390f35b61058f600480360381019061058a9190612ca3565b6113ca565b60405161059c9190613322565b60405180910390f35b6105bf60048036038101906105ba9190612ab5565b61146f565b005b6105db60048036038101906105d69190612ca3565b611485565b6040516105e891906132e5565b60405180910390f35b61060b60048036038101906106069190612dcb565b611635565b6040516106189190613322565b60405180910390f35b61063b60048036038101906106369190612a32565b6116e5565b005b61065760048036038101906106529190612ca3565b611747565b6040516106649190613322565b60405180910390f35b61068760048036038101906106829190612c5a565b611834565b6040516106949190613524565b60405180910390f35b6106b760048036038101906106b29190612e0b565b6118a3565b005b6106d360048036038101906106ce9190612cd0565b6118e7565b005b6106ef60048036038101906106ea919061299f565b611913565b6040516106fc9190613307565b60405180910390f35b61071f600480360381019061071a9190612ca3565b6119a7565b60405161072c91906132e5565b60405180910390f35b61073e82611b57565b61077d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077490613484565b60405180910390fd5b806012600084815260200190815260200160002090805190602001906107a49291906126cf565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061087457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610884575061088382611bc3565b5b9050919050565b60606000805461089a906137d9565b80601f01602080910402602001604051908101604052809291908181526020018280546108c6906137d9565b80156109135780601f106108e857610100808354040283529160200191610913565b820191906000526020600020905b8154815290600101906020018083116108f657829003601f168201915b5050505050905090565b600061092882611b57565b610967576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095e90613464565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006109ad8261106b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a15906134e4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610a3d611c2d565b73ffffffffffffffffffffffffffffffffffffffff161480610a6c5750610a6b81610a66611c2d565b611913565b5b610aab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa2906133e4565b60405180910390fd5b610ab58383611c35565b505050565b6000610b6182601260008881526020019081526020016000208054610ade906137d9565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0a906137d9565b8015610b575780601f10610b2c57610100808354040283529160200191610b57565b820191906000526020600020905b815481529060010190602001808311610b3a57829003601f168201915b5050505050610c76565b905082601260008781526020019081526020016000209080519060200190610b8a9291906126cf565b50610b96818385610db2565b610ba3600a5486866118a3565b600a6000815480929190610bb69061383c565b919050555060076000815480929190610bce9061383c565b91905055505050505050565b600d5481565b6000600654905090565b80601360008481526020019081526020016000209080519060200190610c119291906126cf565b505050565b610c27610c21611c2d565b82611cee565b610c66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5d90613504565b60405180910390fd5b610c71838383611dcc565b505050565b600080600090505b600954811015610d4357610c9184612028565b80519060200120600e6000838152602001908152602001600020600060028110610cbe57610cbd613943565b5b01604051610ccc9190613267565b6040518091039020148015610d2257508280519060200120600e6000838152602001908152602001600020600160028110610d0a57610d09613943565b5b01604051610d189190613267565b6040518091039020145b15610d305780915050610d49565b8080610d3b9061383c565b915050610c7e565b50600090505b92915050565b6000610d5d84600654612189565b610d6960065484610735565b610d766009548385610db2565b60066000815480929190610d899061383c565b919050555060096000815480929190610da19061383c565b919050555060065490509392505050565b6040518060400160405280610dc684612028565b815260200182815250600e6000858152602001908152602001600020906002610df0929190612755565b50505050565b610e11838383604051806020016040528060008152506116e5565b505050565b6060601160008381526020019081526020016000208054610e36906137d9565b80601f0160208091040260200160405190810160405280929190818152602001828054610e62906137d9565b8015610eaf5780601f10610e8457610100808354040283529160200191610eaf565b820191906000526020600020905b815481529060010190602001808311610e9257829003601f168201915b50505050509050919050565b60606000600a67ffffffffffffffff811115610eda57610ed9613972565b5b604051908082528060200260200182016040528015610f0d57816020015b6060815260200190600190039081610ef85790505b5090506000805b600a5481101561106057610f2785612028565b80519060200120600f6000838152602001908152602001600020600060028110610f5457610f53613943565b5b01604051610f629190613267565b6040518091039020141561104d57600f6000828152602001908152602001600020600160028110610f9657610f95613943565b5b018054610fa2906137d9565b80601f0160208091040260200160405190810160405280929190818152602001828054610fce906137d9565b801561101b5780601f10610ff05761010080835404028352916020019161101b565b820191906000526020600020905b815481529060010190602001808311610ffe57829003601f168201915b505050505083838151811061103357611032613943565b5b602002602001018190525081806110499061383c565b9250505b80806110589061383c565b915050610f14565b508192505050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611114576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110b90613424565b60405180910390fd5b80915050919050565b600061112b60085483610bea565b6008600081548092919061113e9061383c565b9190505550600854905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b690613404565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606010600083815260200190815260200160002060006002811061122e5761122d613943565b5b01805461123a906137d9565b80601f0160208091040260200160405190810160405280929190818152602001828054611266906137d9565b80156112b35780601f10611288576101008083540402835291602001916112b3565b820191906000526020600020905b81548152906001019060200180831161129657829003601f168201915b50505050509050919050565b6000600854905090565b600080600090505b60065481101561132d578280519060200120601260008381526020019081526020016000206040516113039190613267565b6040518091039020141561131a5780915050611333565b80806113259061383c565b9150506112d1565b50600090505b919050565b606060018054611347906137d9565b80601f0160208091040260200160405190810160405280929190818152602001828054611373906137d9565b80156113c05780601f10611395576101008083540402835291602001916113c0565b820191906000526020600020905b8154815290600101906020018083116113a357829003601f168201915b5050505050905090565b60606013600083815260200190815260200160002080546113ea906137d9565b80601f0160208091040260200160405190810160405280929190818152602001828054611416906137d9565b80156114635780601f1061143857610100808354040283529160200191611463565b820191906000526020600020905b81548152906001019060200180831161144657829003601f168201915b50505050509050919050565b61148161147a611c2d565b8383612357565b5050565b60606000600a67ffffffffffffffff8111156114a4576114a3613972565b5b6040519080825280602002602001820160405280156114d757816020015b60608152602001906001900390816114c25790505b5090506000805b600a5481101561162a576114f185612028565b80519060200120600f600083815260200190815260200160002060006002811061151e5761151d613943565b5b0160405161152c9190613267565b6040518091039020141561161757600f60008281526020019081526020016000206001600281106115605761155f613943565b5b01805461156c906137d9565b80601f0160208091040260200160405190810160405280929190818152602001828054611598906137d9565b80156115e55780601f106115ba576101008083540402835291602001916115e5565b820191906000526020600020905b8154815290600101906020018083116115c857829003601f168201915b50505050508383815181106115fd576115fc613943565b5b602002602001018190525081806116139061383c565b9250505b80806116229061383c565b9150506114de565b508192505050919050565b6010602052816000526040600020816002811061165157600080fd5b01600091509150508054611664906137d9565b80601f0160208091040260200160405190810160405280929190818152602001828054611690906137d9565b80156116dd5780601f106116b2576101008083540402835291602001916116dd565b820191906000526020600020905b8154815290600101906020018083116116c057829003601f168201915b505050505081565b6116f66116f0611c2d565b83611cee565b611735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172c90613504565b60405180910390fd5b611741848484846124c4565b50505050565b606061175282611b57565b611791576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611788906134c4565b60405180910390fd5b6012600083815260200190815260200160002080546117af906137d9565b80601f01602080910402602001604051908101604052809291908181526020018280546117db906137d9565b80156118285780601f106117fd57610100808354040283529160200191611828565b820191906000526020600020905b81548152906001019060200180831161180b57829003601f168201915b50505050509050919050565b600080600090505b6007548110156118985782805190602001206011600083815260200190815260200160002060405161186e9190613267565b60405180910390201415611885578091505061189e565b80806118909061383c565b91505061183c565b50600090505b919050565b60405180604001604052806118b784612028565b815260200182815250600f60008581526020019081526020016000209060026118e1929190612755565b50505050565b8060116000848152602001908152602001600020908051906020019061190e9291906126cf565b505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60606000600a67ffffffffffffffff8111156119c6576119c5613972565b5b6040519080825280602002602001820160405280156119f957816020015b60608152602001906001900390816119e45790505b5090506000805b600954811015611b4c57611a1385612028565b80519060200120600e6000838152602001908152602001600020600060028110611a4057611a3f613943565b5b01604051611a4e9190613267565b60405180910390201415611b3957600e6000828152602001908152602001600020600160028110611a8257611a81613943565b5b018054611a8e906137d9565b80601f0160208091040260200160405190810160405280929190818152602001828054611aba906137d9565b8015611b075780601f10611adc57610100808354040283529160200191611b07565b820191906000526020600020905b815481529060010190602001808311611aea57829003601f168201915b5050505050838381518110611b1f57611b1e613943565b5b60200260200101819052508180611b359061383c565b9250505b8080611b449061383c565b915050611a00565b508192505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611ca88361106b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611cf982611b57565b611d38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2f906133c4565b60405180910390fd5b6000611d438361106b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611db257508373ffffffffffffffffffffffffffffffffffffffff16611d9a8461091d565b73ffffffffffffffffffffffffffffffffffffffff16145b80611dc35750611dc28185611913565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611dec8261106b565b73ffffffffffffffffffffffffffffffffffffffff1614611e42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e39906134a4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611eb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea990613384565b60405180910390fd5b611ebd838383612520565b611ec8600082611c35565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f1891906136ef565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f6f9190613668565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60606000821415612070576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612184565b600082905060005b600082146120a257808061208b9061383c565b915050600a8261209b91906136be565b9150612078565b60008167ffffffffffffffff8111156120be576120bd613972565b5b6040519080825280601f01601f1916602001820160405280156120f05781602001600182028036833780820191505090505b5090505b6000851461217d5760018261210991906136ef565b9150600a856121189190613885565b60306121249190613668565b60f81b81838151811061213a57612139613943565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561217691906136be565b94506120f4565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156121f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f090613444565b60405180910390fd5b61220281611b57565b15612242576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223990613364565b60405180910390fd5b61224e60008383612520565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461229e9190613668565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156123c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123bd906133a4565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516124b79190613307565b60405180910390a3505050565b6124cf848484611dcc565b6124db84848484612525565b61251a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251190613344565b60405180910390fd5b50505050565b505050565b60006125468473ffffffffffffffffffffffffffffffffffffffff166126bc565b156126af578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261256f611c2d565b8786866040518563ffffffff1660e01b81526004016125919493929190613299565b602060405180830381600087803b1580156125ab57600080fd5b505af19250505080156125dc57506040513d601f19601f820116820180604052508101906125d99190612c2d565b60015b61265f573d806000811461260c576040519150601f19603f3d011682016040523d82523d6000602084013e612611565b606091505b50600081511415612657576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264e90613344565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506126b4565b600190505b949350505050565b600080823b905060008111915050919050565b8280546126db906137d9565b90600052602060002090601f0160209004810192826126fd5760008555612744565b82601f1061271657805160ff1916838001178555612744565b82800160010185558215612744579182015b82811115612743578251825591602001919060010190612728565b5b50905061275191906127a8565b5090565b8260028101928215612797579160200282015b828111156127965782518290805190602001906127869291906126cf565b5091602001919060010190612768565b5b5090506127a491906127c5565b5090565b5b808211156127c15760008160009055506001016127a9565b5090565b5b808211156127e557600081816127dc91906127e9565b506001016127c6565b5090565b5080546127f5906137d9565b6000825580601f106128075750612826565b601f01602090049060005260206000209081019061282591906127a8565b5b50565b600061283c61283784613564565b61353f565b905082815260208101848484011115612858576128576139a6565b5b612863848285613797565b509392505050565b600061287e61287984613595565b61353f565b90508281526020810184848401111561289a576128996139a6565b5b6128a5848285613797565b509392505050565b6000813590506128bc81613df5565b92915050565b6000813590506128d181613e0c565b92915050565b6000813590506128e681613e23565b92915050565b6000815190506128fb81613e23565b92915050565b600082601f830112612916576129156139a1565b5b8135612926848260208601612829565b91505092915050565b600082601f830112612944576129436139a1565b5b813561295484826020860161286b565b91505092915050565b60008135905061296c81613e3a565b92915050565b600060208284031215612988576129876139b0565b5b6000612996848285016128ad565b91505092915050565b600080604083850312156129b6576129b56139b0565b5b60006129c4858286016128ad565b92505060206129d5858286016128ad565b9150509250929050565b6000806000606084860312156129f8576129f76139b0565b5b6000612a06868287016128ad565b9350506020612a17868287016128ad565b9250506040612a288682870161295d565b9150509250925092565b60008060008060808587031215612a4c57612a4b6139b0565b5b6000612a5a878288016128ad565b9450506020612a6b878288016128ad565b9350506040612a7c8782880161295d565b925050606085013567ffffffffffffffff811115612a9d57612a9c6139ab565b5b612aa987828801612901565b91505092959194509250565b60008060408385031215612acc57612acb6139b0565b5b6000612ada858286016128ad565b9250506020612aeb858286016128c2565b9150509250929050565b60008060408385031215612b0c57612b0b6139b0565b5b6000612b1a858286016128ad565b925050602083013567ffffffffffffffff811115612b3b57612b3a6139ab565b5b612b478582860161292f565b9150509250929050565b600080600060608486031215612b6a57612b696139b0565b5b6000612b78868287016128ad565b935050602084013567ffffffffffffffff811115612b9957612b986139ab565b5b612ba58682870161292f565b9250506040612bb68682870161295d565b9150509250925092565b60008060408385031215612bd757612bd66139b0565b5b6000612be5858286016128ad565b9250506020612bf68582860161295d565b9150509250929050565b600060208284031215612c1657612c156139b0565b5b6000612c24848285016128d7565b91505092915050565b600060208284031215612c4357612c426139b0565b5b6000612c51848285016128ec565b91505092915050565b600060208284031215612c7057612c6f6139b0565b5b600082013567ffffffffffffffff811115612c8e57612c8d6139ab565b5b612c9a8482850161292f565b91505092915050565b600060208284031215612cb957612cb86139b0565b5b6000612cc78482850161295d565b91505092915050565b60008060408385031215612ce757612ce66139b0565b5b6000612cf58582860161295d565b925050602083013567ffffffffffffffff811115612d1657612d156139ab565b5b612d228582860161292f565b9150509250929050565b60008060008060808587031215612d4657612d456139b0565b5b6000612d548782880161295d565b945050602085013567ffffffffffffffff811115612d7557612d746139ab565b5b612d818782880161292f565b935050604085013567ffffffffffffffff811115612da257612da16139ab565b5b612dae8782880161292f565b9250506060612dbf8782880161295d565b91505092959194509250565b60008060408385031215612de257612de16139b0565b5b6000612df08582860161295d565b9250506020612e018582860161295d565b9150509250929050565b600080600060608486031215612e2457612e236139b0565b5b6000612e328682870161295d565b9350506020612e438682870161295d565b925050604084013567ffffffffffffffff811115612e6457612e636139ab565b5b612e708682870161292f565b9150509250925092565b6000612e868383612fd9565b905092915050565b612e9781613723565b82525050565b6000612ea8826135eb565b612eb28185613619565b935083602082028501612ec4856135c6565b8060005b85811015612f005784840389528151612ee18582612e7a565b9450612eec8361360c565b925060208a01995050600181019050612ec8565b50829750879550505050505092915050565b612f1b81613735565b82525050565b6000612f2c826135f6565b612f36818561362a565b9350612f468185602086016137a6565b612f4f816139b5565b840191505092915050565b60008154612f67816137d9565b612f71818661363b565b94506001821660008114612f8c5760018114612f9d57612fd0565b60ff19831686528186019350612fd0565b612fa6856135d6565b60005b83811015612fc857815481890152600182019150602081019050612fa9565b838801955050505b50505092915050565b6000612fe482613601565b612fee8185613646565b9350612ffe8185602086016137a6565b613007816139b5565b840191505092915050565b600061301d82613601565b6130278185613657565b93506130378185602086016137a6565b613040816139b5565b840191505092915050565b6000613058603283613657565b9150613063826139c6565b604082019050919050565b600061307b601c83613657565b915061308682613a15565b602082019050919050565b600061309e602483613657565b91506130a982613a3e565b604082019050919050565b60006130c1601983613657565b91506130cc82613a8d565b602082019050919050565b60006130e4602c83613657565b91506130ef82613ab6565b604082019050919050565b6000613107603883613657565b915061311282613b05565b604082019050919050565b600061312a602a83613657565b915061313582613b54565b604082019050919050565b600061314d602983613657565b915061315882613ba3565b604082019050919050565b6000613170602083613657565b915061317b82613bf2565b602082019050919050565b6000613193602c83613657565b915061319e82613c1b565b604082019050919050565b60006131b6602c83613657565b91506131c182613c6a565b604082019050919050565b60006131d9602983613657565b91506131e482613cb9565b604082019050919050565b60006131fc602f83613657565b915061320782613d08565b604082019050919050565b600061321f602183613657565b915061322a82613d57565b604082019050919050565b6000613242603183613657565b915061324d82613da6565b604082019050919050565b6132618161378d565b82525050565b60006132738284612f5a565b915081905092915050565b60006020820190506132936000830184612e8e565b92915050565b60006080820190506132ae6000830187612e8e565b6132bb6020830186612e8e565b6132c86040830185613258565b81810360608301526132da8184612f21565b905095945050505050565b600060208201905081810360008301526132ff8184612e9d565b905092915050565b600060208201905061331c6000830184612f12565b92915050565b6000602082019050818103600083015261333c8184613012565b905092915050565b6000602082019050818103600083015261335d8161304b565b9050919050565b6000602082019050818103600083015261337d8161306e565b9050919050565b6000602082019050818103600083015261339d81613091565b9050919050565b600060208201905081810360008301526133bd816130b4565b9050919050565b600060208201905081810360008301526133dd816130d7565b9050919050565b600060208201905081810360008301526133fd816130fa565b9050919050565b6000602082019050818103600083015261341d8161311d565b9050919050565b6000602082019050818103600083015261343d81613140565b9050919050565b6000602082019050818103600083015261345d81613163565b9050919050565b6000602082019050818103600083015261347d81613186565b9050919050565b6000602082019050818103600083015261349d816131a9565b9050919050565b600060208201905081810360008301526134bd816131cc565b9050919050565b600060208201905081810360008301526134dd816131ef565b9050919050565b600060208201905081810360008301526134fd81613212565b9050919050565b6000602082019050818103600083015261351d81613235565b9050919050565b60006020820190506135396000830184613258565b92915050565b600061354961355a565b9050613555828261380b565b919050565b6000604051905090565b600067ffffffffffffffff82111561357f5761357e613972565b5b613588826139b5565b9050602081019050919050565b600067ffffffffffffffff8211156135b0576135af613972565b5b6135b9826139b5565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006136738261378d565b915061367e8361378d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156136b3576136b26138b6565b5b828201905092915050565b60006136c98261378d565b91506136d48361378d565b9250826136e4576136e36138e5565b5b828204905092915050565b60006136fa8261378d565b91506137058361378d565b925082821015613718576137176138b6565b5b828203905092915050565b600061372e8261376d565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156137c45780820151818401526020810190506137a9565b838111156137d3576000848401525b50505050565b600060028204905060018216806137f157607f821691505b6020821081141561380557613804613914565b5b50919050565b613814826139b5565b810181811067ffffffffffffffff8211171561383357613832613972565b5b80604052505050565b60006138478261378d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561387a576138796138b6565b5b600182019050919050565b60006138908261378d565b915061389b8361378d565b9250826138ab576138aa6138e5565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b613dfe81613723565b8114613e0957600080fd5b50565b613e1581613735565b8114613e2057600080fd5b50565b613e2c81613741565b8114613e3757600080fd5b50565b613e438161378d565b8114613e4e57600080fd5b5056fea2646970667358221220659dc207554e7aa24aad6450a73a10579319ec61dc11821e0b7a96e1c55da8d564736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1557,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1559,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_bidIds",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1561,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_eventIds",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1563,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_EventTokenIds",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1565,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_TokenBidIds",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1569,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "data1",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_string_storage)2_storage"
      },
      {
        "astId": 1571,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_EventTokenSearchIds",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1577,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "AllEventTokens",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1583,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "AllTokensBids",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1589,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_SearchedStore",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1593,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_bidURIs",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1597,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1601,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_eventURIs",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1605,
        "contract": "contracts/MetisERC721.sol:MetisERC721",
        "label": "_eventTokens",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)2_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[2]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)2_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}